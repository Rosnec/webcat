(require 'me.raynes.laser)
(require 'me.raynes.laser :as 'laser)
(require 'me.raynes.laser :as laser)
(require 'clojure.java.browse)
(clojure.java.browse/browse-url "www.duckduckgo.com")
(doc io!)
(meta io!)
(source io!)
(frequencies "a b a a b")
(reduce
         (fn [primes number]
           (if (some zero? (map (partial mod number) primes))
             primes
             (conj primes number)))
         [2]
         (take 1000 (iterate inc 3)))
(defn primes [n] (reduce
         (fn [primes number]
           (if (some zero? (map (partial mod number) primes))
             primes
             (conj primes number)))
         [2]
         (take n (iterate inc 3))))
(primes 10000)
(primes 100000)
(
)
(doc filter)
(use webcat.editor
)
(use 'webcat.editor)
(if 0 true false)
(if nil true false)
(if false true false)
(concat "af" "g d"
)
(use 'clojure.string)
(require 'clojure.string)
(clojure.string/join "ab " "c d")
(clojure.string/join ["ab " "c d"])
(clojure.string/join "ab c d")
(use seesaw.bind)
(use 'seesaw.bind)
(doc seesaw.bind/transform)
(doc 'seesaw.bind/transform)
(sdoc 'seesaw.bind/transform)
(meta 'seesaw.bind/transform)
(meta seesaw.bind/transform)
(seesaw.bind/transform)
(seesaw.bind/transform 1)
(doc (seesaw.bind/transform 1))
(doc '(seesaw.bind/transform 1))
(use 'clojure.math.numeric-tower)
(expt 3 2)
(expt 3 (/ 1 2))
(sqrt 3)
(= (expt 3 (/ 1 2)) (sqrt 3)
)
(= (expt 3 (/ 2)) (sqrt 3))
(count {1 2 3 4})
(reduce + [1
])
(reduce + [1])
(reduce + [1 2])
(reduce + [1 2 3])
(reduce + [1 2 3 1])
(with-open [rdr (reader "test.clj")] (read rdr))
(use 'clojure.java.io)
(with-open [rdr (reader "test.clj")] (read rdr))
(with-open [rdr (reader "test.clj")] (read (slurp rdr)))
(with-open [rdr (reader "/tmp/test.txt")]
  (doseq [line (line-seq rdr)]
    (println line)))
(with-open [rdr (reader "test.clj")]
  (doseq [line (line-seq rdr)]
    (println line)))
(with-open [rdr (reader "test.clj")] (slurp rdr))
(with-open [rdr (reader "test.clj")] (read-string (slurp rdr)))
(with-open [rdr (reader "test.clj")] (read (slurp rdr)))
(with-open [rdr (reader "test.clj")] (read rdr))
(with-open [rdr (reader "test.clj")] (read (PushbackReader. rdr)))
(import [java.io PushbackReader])
(with-open [rdr (reader "test.clj")] (read (PushbackReader. rdr)))
((with-open [rdr (reader "test.clj")] (read (PushbackReader. rdr))) 1)
(str {1 2})
(spit "test.clj" "(1 2 3)")
(intersection {:a :b :c :d} {:c :d :e :f})
(use 'clojure.set)
(intersection {:a :b :c :d} {:c :d :e :f})
(intersection (keys {:a :b :c :d}) (keys {:c :d :e :f}))
(intersection (set {:a :b :c :d}) (set {:c :d :e :f}))
(intersection (set {:a :b :c :d :e :f}) (set {:c :d :e :f}))
